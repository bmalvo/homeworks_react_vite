/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthImport } from './routes/unauth'
import { Route as TasksImport } from './routes/tasks'
import { Route as IpImport } from './routes/ip'
import { Route as IndexImport } from './routes/index'
import { Route as TasksTasksImport } from './routes/tasks/tasks'
import { Route as TasksNewImport } from './routes/tasks/new'
import { Route as TasksIdImport } from './routes/tasks/$id'
import { Route as TasksEditIdImport } from './routes/tasks/edit.$id'

// Create/Update Routes

const UnauthRoute = UnauthImport.update({
  path: '/unauth',
  getParentRoute: () => rootRoute,
} as any)

const TasksRoute = TasksImport.update({
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const IpRoute = IpImport.update({
  path: '/ip',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ip.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksTasksRoute = TasksTasksImport.update({
  path: '/tasks',
  getParentRoute: () => TasksRoute,
} as any)

const TasksNewRoute = TasksNewImport.update({
  path: '/new',
  getParentRoute: () => TasksRoute,
} as any)

const TasksIdRoute = TasksIdImport.update({
  path: '/$id',
  getParentRoute: () => TasksRoute,
} as any)

const TasksEditIdRoute = TasksEditIdImport.update({
  path: '/edit/$id',
  getParentRoute: () => TasksRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ip': {
      id: '/ip'
      path: '/ip'
      fullPath: '/ip'
      preLoaderRoute: typeof IpImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/unauth': {
      id: '/unauth'
      path: '/unauth'
      fullPath: '/unauth'
      preLoaderRoute: typeof UnauthImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$id': {
      id: '/tasks/$id'
      path: '/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdImport
      parentRoute: typeof TasksImport
    }
    '/tasks/new': {
      id: '/tasks/new'
      path: '/new'
      fullPath: '/tasks/new'
      preLoaderRoute: typeof TasksNewImport
      parentRoute: typeof TasksImport
    }
    '/tasks/tasks': {
      id: '/tasks/tasks'
      path: '/tasks'
      fullPath: '/tasks/tasks'
      preLoaderRoute: typeof TasksTasksImport
      parentRoute: typeof TasksImport
    }
    '/tasks/edit/$id': {
      id: '/tasks/edit/$id'
      path: '/edit/$id'
      fullPath: '/tasks/edit/$id'
      preLoaderRoute: typeof TasksEditIdImport
      parentRoute: typeof TasksImport
    }
  }
}

// Create and export the route tree

interface TasksRouteChildren {
  TasksIdRoute: typeof TasksIdRoute
  TasksNewRoute: typeof TasksNewRoute
  TasksTasksRoute: typeof TasksTasksRoute
  TasksEditIdRoute: typeof TasksEditIdRoute
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksIdRoute: TasksIdRoute,
  TasksNewRoute: TasksNewRoute,
  TasksTasksRoute: TasksTasksRoute,
  TasksEditIdRoute: TasksEditIdRoute,
}

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ip': typeof IpRoute
  '/tasks': typeof TasksRouteWithChildren
  '/unauth': typeof UnauthRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/tasks/tasks': typeof TasksTasksRoute
  '/tasks/edit/$id': typeof TasksEditIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ip': typeof IpRoute
  '/tasks': typeof TasksRouteWithChildren
  '/unauth': typeof UnauthRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/tasks/tasks': typeof TasksTasksRoute
  '/tasks/edit/$id': typeof TasksEditIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ip': typeof IpRoute
  '/tasks': typeof TasksRouteWithChildren
  '/unauth': typeof UnauthRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/tasks/tasks': typeof TasksTasksRoute
  '/tasks/edit/$id': typeof TasksEditIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ip'
    | '/tasks'
    | '/unauth'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/tasks'
    | '/tasks/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ip'
    | '/tasks'
    | '/unauth'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/tasks'
    | '/tasks/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/ip'
    | '/tasks'
    | '/unauth'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/tasks'
    | '/tasks/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IpRoute: typeof IpRoute
  TasksRoute: typeof TasksRouteWithChildren
  UnauthRoute: typeof UnauthRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IpRoute: IpRoute,
  TasksRoute: TasksRouteWithChildren,
  UnauthRoute: UnauthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ip",
        "/tasks",
        "/unauth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ip": {
      "filePath": "ip.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx",
      "children": [
        "/tasks/$id",
        "/tasks/new",
        "/tasks/tasks",
        "/tasks/edit/$id"
      ]
    },
    "/unauth": {
      "filePath": "unauth.tsx"
    },
    "/tasks/$id": {
      "filePath": "tasks/$id.tsx",
      "parent": "/tasks"
    },
    "/tasks/new": {
      "filePath": "tasks/new.tsx",
      "parent": "/tasks"
    },
    "/tasks/tasks": {
      "filePath": "tasks/tasks.tsx",
      "parent": "/tasks"
    },
    "/tasks/edit/$id": {
      "filePath": "tasks/edit.$id.tsx",
      "parent": "/tasks"
    }
  }
}
ROUTE_MANIFEST_END */
